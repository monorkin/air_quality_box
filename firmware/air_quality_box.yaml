# Import more components
external_components:
  - source: github://monorkin/esphome_st7565@main
    components: [ st7565 ]

# Project configuration
esphome:
  name: air-quality-box
  platform: ESP8266
  board: nodemcuv2

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Air-Quality-Box Fallback Hotspot"
    password: !secret ap_password

captive_portal:

# Configure I2C busses
i2c:
  - sda: D2
    scl: D1
    scan: true
    id: primary_i2c_bus

# Configure serial lines
uart:
  - rx_pin: D3
    tx_pin: D4
    baud_rate: 9600
    id: mhz19b_serial

# Configure SPI busses
spi:
  - clk_pin: D5
    mosi_pin: D6
    id: primary_spi_bus

# Import fonts
font:
  - file: "fonts/Roboto-Regular.ttf"
    id: my_font
    size: 15
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz³µ#</"

# Setup displays
display:
  - platform: st7565
    id: primary_display
    spi_id: primary_spi_bus
    width: 128
    height: 64
    dc_pin:
      number: D7
    cs_pin:
      number: D8
    reset_pin:
      number: D0
    # rotation: 180
    pages:
      - id: temp_page
        lambda: |-
          it.print(0, 0, id(my_font), "TEMPERATURE");
          if (isnan(id(temp_sensor).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(temp_sensor).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 40) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 35) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 30) { strcpy(dangerLevel, "(!)"); }
            else if (value < 5) { strcpy(dangerLevel, "(!!!)"); }
            else if (value < 10) { strcpy(dangerLevel, "(!!)"); }
            else if (value < 15) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.1f°C %s", value, dangerLevel);
            it.graph(0, 40, id(temp_graph));

            free(dangerLevel);
          }
      - id: humidity_page
        lambda: |-
          it.print(0, 0, id(my_font), "HUMIDITY");
          if (isnan(id(humidity_sensor).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(humidity_sensor).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 70) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 65) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 60) { strcpy(dangerLevel, "(!)"); }
            else if (value < 20) { strcpy(dangerLevel, "(!!!)"); }
            else if (value < 25) { strcpy(dangerLevel, "(!!)"); }
            else if (value < 30) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.1f%% %s", value, dangerLevel);
            it.graph(0, 40, id(humidity_graph));

            free(dangerLevel);
          }
      - id: pressure_page
        lambda: |-
          it.print(0, 0, id(my_font), "PRESSURE");
          if (isnan(id(pressure_sensor).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            it.printf(0, 20, id(my_font), "%.1f hPa", id(pressure_sensor).state);
            it.graph(0, 40, id(pressure_graph));
          }
      - id: co2_page
        lambda: |-
          it.print(0, 0, id(my_font), "CO2");
          if (isnan(id(co2_sensor).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(co2_sensor).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 2000) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 1000) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 800) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.0f ppm %s", value, dangerLevel);
            it.graph(0, 40, id(co2_graph));

            free(dangerLevel);
          }
      - id: part_matter_1um_page
        lambda: |-
          it.print(0, 0, id(my_font), "DUST <1µm");
          if (isnan(id(PM_1_0).state) || isnan(id(PMC_1_0).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(PM_1_0).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 55.5) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 35.5) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 12.1) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.2f µg/m³ %s", value, dangerLevel);
            it.graph(0, 40, id(pm_1_0_graph));

            free(dangerLevel);
          }
      - id: part_matter_2_5um_page
        lambda: |-
          it.print(0, 0, id(my_font), "DUST <2.5µm");
          if (isnan(id(PM_2_5).state) || isnan(id(PMC_2_5).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(PM_2_5).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 55.5) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 35.5) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 12.1) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.2f µg/m³ %s", value, dangerLevel);
            it.graph(0, 40, id(pm_2_5_graph));

            free(dangerLevel);
          }
      - id: part_matter_5um_page
        lambda: |-
          it.print(0, 0, id(my_font), "DUST <4µm");
          if (isnan(id(PM_4_0).state) || isnan(id(PMC_4_0).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(PM_4_0).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 55.5) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 35.5) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 12.1) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.2f µg/m³ %s", value, dangerLevel);
            it.graph(0, 40, id(pm_4_0_graph));

            free(dangerLevel);
          }
      - id: part_matter_10um_page
        lambda: |-
          it.print(0, 0, id(my_font), "DUST <10µm");
          if (isnan(id(PM_10_0).state) || isnan(id(PMC_10_0).state)) {
            it.print(0, 20, id(my_font), "Gathering data...");
          }
          else {
            float value = id(PM_10_0).state;

            char* dangerLevel = (char*)malloc(sizeof(char) * 6);
            if (value > 55.5) { strcpy(dangerLevel, "(!!!)"); }
            else if (value > 35.5) { strcpy(dangerLevel, "(!!)"); }
            else if (value > 12.1) { strcpy(dangerLevel, "(!)"); }
            else { strcpy(dangerLevel, ""); }

            it.printf(0, 20, id(my_font), "%.2f µg/m³ %s", value, dangerLevel);
            it.graph(0, 40, id(pm_10_0_graph));

            free(dangerLevel);
          }

graph:
  - id: temp_graph
    sensor: temp_sensor
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: humidity_graph
    sensor: humidity_sensor
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: pressure_graph
    sensor: pressure_sensor
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: co2_graph
    sensor: co2_sensor
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: pm_1_0_graph
    sensor: PM_1_0
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: pm_2_5_graph
    sensor: PM_2_5
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: pm_4_0_graph
    sensor: PM_4_0
    duration: 30min
    width: 128
    height: 22
    border: false
  - id: pm_10_0_graph
    sensor: PM_10_0
    duration: 30min
    width: 128
    height: 22
    border: false

interval:
  - interval: 5s
    then:
      - display.page.show_next: primary_display
      - component.update: primary_display

# Configure sensors
sensor:
  - platform: bme680
    temperature:
      name: "Temperature"
      oversampling: 16x
      id: temp_sensor
    pressure:
      name: "Pressure"
      id: pressure_sensor
    humidity:
      name: "Humidity"
      id: humidity_sensor
    gas_resistance:
      name: "Gas Resistance"
    i2c_id: primary_i2c_bus
    address: 0x77
    update_interval: 1min

  - platform: sps30
    pm_1_0:
      name: "Particulate Matter <1µm Weight concentration"
      id: "PM_1_0"
    pm_2_5:
      name: "Particulate Matter <2.5µm Weight concentration"
      id: "PM_2_5"
    pm_4_0:
      name: "Particulate Matter <4µm Weight concentration"
      id: "PM_4_0"
    pm_10_0:
      name: "Particulate Matter <10µm Weight concentration"
      id: "PM_10_0"
    pmc_0_5:
      name: "Particulate Matter <0.5µm Number concentration"
      id: "PMC_0_5"
    pmc_1_0:
      name: "Particulate Matter <1µm Number concentration"
      id: "PMC_1_0"
    pmc_2_5:
      name: "Particulate Matter <2.5µm Number concentration"
      id: "PMC_2_5"
    pmc_4_0:
      name: "Particulate Matter <4µm Number concentration"
      id: "PMC_4_0"
    pmc_10_0:
      name: "Particulate Matter <10µm Number concentration"
      id: "PMC_10_0"
    i2c_id: primary_i2c_bus
    address: 0x69
    update_interval: 1min

  - platform: mhz19
    co2:
      name: "CO2 Value"
      id: co2_sensor
    update_interval: 1min
    automatic_baseline_calibration: true
    uart_id: mhz19b_serial
